{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","plurality","cases","validSgCases","validPlCases","map","FinnishWord","props","className","finnish_word","RightCard","style","fontSize","cls","src","image","text","WorkingCheckbox","type","checked","onChange","GreyedOutCheckbox","readOnly","disabled","CheckboxRow","generateCheckbox","form","value","onChangeFun","key","replace","onSingular","onClick","index","onPlural","length","NounSettings","switchAll","singular","offset","casesOn","singularCasesOn","pluralCasesOn","allIndexes","Array","keys","a","allSingularOn","allSingularOff","allPluralOn","allPluralOff","filter","formsOn","slice","reduce","b","id","htmlFor","forms","UserTextInput","handleKeyPress","event","enterCallback","state","this","background_cls","placeholder","currentWord","onKeyPress","evt","setState","target","ref","reference","autoFocus","React","Component","WordManager","generateNewWord","wordIndex","Math","floor","random","currentData","word","formsOnCount","el","formSubsetIndex","trueFormIndex","i","currentEntry","data","currentFormName","currentAnswer","currentTranslation","tran","currentKotusType","kotus","console","log","checkUserAnswer","answer","correctCallback","incorrectCallback","includes","switchOnOff","indexes","isArray","afterChange","localStorage","setItem","formSettingsName","JSON","stringify","alert","topWords","top","kotusWords","topWordsKeys","Object","kotusWordsKeys","mode","dataSettingsName","parse","getItem","defaultForms","UserIO","flicker","colorCSSClass","textInputBG","setTimeout","inputRef","current","createRef","computeFontSize","l","max","min","ReactDOM","render","topNouns","kotusNouns","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2eecd99e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport kotusNouns from './kotus_nouns.json';\nimport topNouns from './top_nouns.json'\nimport * as serviceWorker from './serviceWorker';\n// import './checkbox.css'\n\nconst ALWAYS_INVALID = -1;\nconst plurality = ['singular', 'plural'];\nconst cases = ['nominative', 'genitive', 'partitive',\n  'inessive (-ssA)', 'elative (-stA)', 'illative (hVn)',\n  'adessive (-llA)', 'ablative (-ltA)', 'allative (-lle)',\n  'essive (-nA)', 'translative (-ksi)',\n  'instructive (-in)', 'abessive (-ttA)', 'comitative (-ne)'];\n//nominative sg is trivial and accusative officially does not exist\n// and instructive+comitative is only plural\nconst validSgCases = [ALWAYS_INVALID, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ALWAYS_INVALID, 1, ALWAYS_INVALID];\nconst validPlCases = cases.map(() => 1)\n\n// const cases_singular = [...cases.slice(2, 12), cases[13]]\n// const cases_plural = [cases[0], ...cases.slice(2, cases.length)]\n\n\nfunction FinnishWord(props) {\n  return (\n    <div className=\"card word-card lcard card-text ltext\"><p className=\"\">{props.finnish_word}</p></div>\n  )\n}\n\nfunction RightCard(props) {\n  const style = {\n    fontSize: props.fontSize + \"em\",\n  }\n  return (\n    <div className={\"container card word-card rcard \" + props.cls}>\n      <div className=\"row no-gutters align-items-center h-100\">\n        <div className=\"col-sm-1\">\n          <img className=\"rcard-image\" src={props.image} />\n        </div>\n        <div className=\"col-sm-11 \">\n          <p className=\"card-text rtext\" style={style}>{props.text}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction IndeterminateCheckbox(props) {\n  let checked = props.truthArray.reduce((a, b) => a && b)\n  let unchecked = props.truthArray.reduce((a, b) => a && !b)\n  return (\n    <input type=\"checkbox\" id={props.id} checked={checked}\n      onChange={() => props.onClick(props.singular, props.index)} />\n  )\n}\n\nfunction WorkingCheckbox(props) {\n  return (\n    <input type=\"checkbox\" checked={props.checked}\n      onChange={props.onChange} />\n  )\n}\n\nfunction GreyedOutCheckbox() {\n  return (\n    <input type=\"checkbox\" checked={false} readOnly disabled={true} />\n  )\n}\n\nfunction CheckboxRow(props) {\n  let generateCheckbox = (form, value, onChangeFun) => {\n    if (value !== -1) {\n      return <WorkingCheckbox key={\"checkbox-\" + form.replace(\" \", \"-\")}\n        checked={value} onChange={onChangeFun} />\n    } else {\n      return <GreyedOutCheckbox key={\"checkbox-\" + form.replace(\" \", \"-\")} />\n    }\n  }\n\n  return (\n    <div className=\"row align-items-center\">\n      <div className=\"col-sm-2\">\n        {props.form}\n      </div>\n      <div className=\"col-sm-1\">\n        {generateCheckbox(props.form, props.onSingular, () => props.onClick(props.index))}\n      </div>\n      <div className=\"col-sm-1\">\n        {generateCheckbox(props.form, props.onPlural, () => props.onClick(props.index + cases.length))}\n      </div>\n\n      <div className=\"col-sm-8\">\n        TBD\n        </div>\n    </div>\n  )\n}\n\nfunction NounSettings(props) {\n  function switchAll(singular) {\n    return () => {\n      let offset = singular ? 0 : cases.length;\n      let casesOn = singular ? singularCasesOn : pluralCasesOn;\n      let allIndexes = [...Array(cases.length).keys()].map(a => a + offset);\n      // console.log(allIndexes)\n      if ((singular && (allSingularOn || allSingularOff)) || (!singular && (allPluralOn || allPluralOff))) {\n        props.onClick(allIndexes);\n      } else {\n        props.onClick(allIndexes.filter((a, index) => !casesOn[index]&&casesOn[index]!==-1));\n      }\n    }\n  }\n\n  let singularCasesOn = props.formsOn.slice(0, cases.length);\n  let allSingularOn = singularCasesOn.reduce((a, b) => a && (b || b === -1), true);\n  let allSingularOff = singularCasesOn.reduce((a, b) => a && (!b || b === -1), true);\n  let pluralCasesOn = props.formsOn.slice(cases.length);\n  let allPluralOn = pluralCasesOn.reduce((a, b) => a && (b || b === -1), true);\n  let allPluralOff = pluralCasesOn.reduce((a, b) => a && (!b || b === -1), true);\n\n  return (\n    <div className=\"card settings mx-auto\">\n      <div className=\"row\">\n        <div className=\"col-sm-2\">\n          {//TODO: settings image\n          }\n        </div>\n        <div className=\"col-sm-1 control-group\">\n          <input type=\"checkbox\" id=\"sg_cb\" onChange={switchAll(true)}\n            checked={allSingularOn} />\n          <label htmlFor=\"sg_cb\">Singular</label>\n        </div>\n        <div className=\"col-sm-1\">\n          <input type=\"checkbox\" id=\"pl_cb\" onChange={switchAll(false)}\n            checked={allPluralOn} />\n          <label htmlFor=\"pl_cb\">Plural</label>\n        </div>\n\n        <div className=\"col-sm-8\">\n          TBD\n        </div>\n      </div>\n\n      {props.forms.slice(0, cases.length).map((form, index) => <CheckboxRow\n        form={form.slice(\"Singular \".length)} onClick={props.onClick} index={index}\n        onSingular={singularCasesOn[index]} onPlural={pluralCasesOn[index]} />)}\n    </div>\n  )\n}\n\n\nclass UserTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n    };\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      this.props.enterCallback(this.state.value);\n    }\n  }\n  render() {\n    return (\n      <div className=\"word-input-flex\">\n        <input type=\"text\" className={\"word-input \" + this.props.background_cls}\n          placeholder={\"type '\" + this.props.currentWord + \"' in the form specified\"} onKeyPress={this.handleKeyPress}\n          onChange={(evt) => { this.setState({ value: evt.target.value }); }}\n          ref={this.props.reference} autoFocus />\n      </div>\n    )\n  }\n}\n\nclass WordManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.topWords = props.top;\n    this.kotusWords = props.kotus;\n    this.topWordsKeys = Object.keys(this.topWords);\n    this.kotusWordsKeys = Object.keys(this.kotusWords);\n    this.forms = props.forms;\n    this.mode = props.mode;\n    this.formSettingsName = this.mode + \"On\";\n    this.dataSettingsName = this.mode + \"Data\";\n    this.state = {\n      formsOn: JSON.parse(localStorage.getItem(this.formSettingsName)) || props.defaultForms,\n      currentData: JSON.parse(localStorage.getItem(this.dataSettingsName)) || {\n        keys: this.topWordsKeys,\n        data: this.topWords\n      },\n      currentWord: \"\",\n      currentAnswer: \"\",\n      currentTranslation: \"\",\n      currentKotusType: \"\",\n      currentFormName: \"\",\n    };\n\n\n  }\n  componentDidMount() {\n    this.generateNewWord();\n  }\n\n  generateNewWord = () => {\n    const wordIndex = Math.floor(Math.random() * this.state.currentData.keys.length);\n    const word = this.state.currentData.keys[wordIndex];\n\n    const formsOnCount = this.state.formsOn.map(el => (el && el!==-1 ? el : 0)).reduce((a, b) => a + b);\n    let formSubsetIndex = Math.floor(Math.random() * formsOnCount);\n    let trueFormIndex = 0;\n    for (let i = 0; i < this.forms.length; ++i) {\n      if (this.state.formsOn[i] && this.state.formsOn[i]!==-1) {\n        formSubsetIndex--;\n      }\n      if (formSubsetIndex < 0) {\n        break;\n      }\n      trueFormIndex++;\n    }\n\n    const currentEntry = this.state.currentData.data[word];\n    this.setState({\n      currentWord: word,\n      currentFormName: this.forms[trueFormIndex],\n      currentAnswer: currentEntry.forms[trueFormIndex],\n      currentTranslation: currentEntry.tran,\n      currentKotusType: currentEntry.kotus\n    })\n    console.log(currentEntry.forms[trueFormIndex]);\n  }\n\n  checkUserAnswer = (answer, correctCallback, incorrectCallback) => {\n    if (this.state.currentAnswer.includes(answer)) {\n      correctCallback();\n      this.generateNewWord();\n    } else {\n      incorrectCallback();\n    }\n  }\n\n  switchOnOff = (indexes) => {\n    if (!Array.isArray(indexes)) {\n      indexes = [indexes];\n    }\n    const afterChange = this.state.formsOn.map((el, i) => indexes.includes(i)&&el!==-1 ? (!el ) : el);\n    // console.log(indexes)\n    if (afterChange.map(el => ((el && el!==-1) ? el : 0)).reduce((a, b) => a + b) > 0) {\n      this.setState({\n        formsOn: afterChange\n      });\n      localStorage.setItem(this.formSettingsName, JSON.stringify(afterChange));\n    } else {\n      alert('At least one form has to be selected!');\n    }\n    // console.log(afterChange);\n  }\n\n  render() {\n    return (\n      <div>\n        <UserIO checkUserAnswer={this.checkUserAnswer} currentWord={this.state.currentWord}\n          currentAnswer={this.state.currentAnswer} currentTranslation={this.state.currentTranslation}\n          currentKotusType={this.state.currentKotusType} currentFormName={this.state.currentFormName} />\n        <NounSettings forms={this.forms} formsOn={this.state.formsOn} onClick={this.switchOnOff} />\n      </div>\n    )\n  }\n}\n\nclass UserIO extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    this.state = {\n      textInputBG: 'black-bg'\n    };\n  }\n\n  flicker = (colorCSSClass) => {\n    this.setState({ textInputBG: colorCSSClass },\n      () => {\n        setTimeout(() => {\n          this.setState({ textInputBG: 'black-bg' })\n        }, 100);\n\n      });\n  }\n\n  checkUserAnswer = (answer) => {\n    this.props.checkUserAnswer(answer,\n      () => {\n        this.inputRef.current.value=\"\";\n        this.flicker(\"green-bg\");\n      },\n      () => this.flicker(\"red-bg\"));\n  }\n\n  render() {\n    function computeFontSize(text) {\n      let l = text.length;\n      return Math.max(Math.min(2, (2 + 33 / 22 - l / 18)), 0.6)\n    }\n    return (\n      <div className=\"word-flag\">\n        <div /*class=\"card gray\"*/>\n          <div className=\"row card-flex\">\n\n            <div className=\"l-stretch\">\n              <FinnishWord finnish_word={this.props.currentWord} />\n            </div>\n\n            <div className=\"r-stretch\">\n              <RightCard text={this.props.currentTranslation} fontSize={computeFontSize(this.props.currentTranslation)} cls='blue' image=\"translation.svg\" />\n              <RightCard text={this.props.currentFormName} fontSize={computeFontSize(this.props.currentFormName)} cls='red' image=\"target.svg\" />\n              <RightCard text={this.props.currentKotusType} fontSize={computeFontSize(this.props.currentKotusType)} cls='yellow' image=\"kotus_type.svg\" />\n              {/* https://en.wiktionary.org/wiki/Appendix:Finnish_nominal_inflection/nuoripari\n              https://en.wiktionary.org/wiki/Appendix:Finnish_conjugation */}\n            </div>\n\n          </div>\n\n        </div>\n        <div className=\"card-flex\">\n          <UserTextInput enterCallback={this.checkUserAnswer} currentWord={this.state.currentWord}\n            reference={this.inputRef} background_cls={this.state.textInputBG} />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction nounForms() {\n  return [...Array(28).keys()].map(i => (plurality[i >= cases.length ? 1 : 0] + \" \" + cases[i % cases.length]));\n}\n\nReactDOM.render(\n  <WordManager top={topNouns} kotus={kotusNouns} forms={nounForms()}\n    mode={\"nouns\"} defaultForms={[...validSgCases, ...validPlCases]} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}